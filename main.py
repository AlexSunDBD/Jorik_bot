from flask import Flask, request
import os
import telegram
from openai import OpenAI
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
BOT = telegram.Bot(token=TOKEN)

# –ö–ª–∏–µ–Ω—Ç OpenRouter
client = OpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1"
)

# –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ DeepSeek –≤ OpenRouter
DEEPSEEK_MODEL = "deepseek/deepseek-v3"  # –†–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å DeepSeek

app = Flask(__name__)

def sync_send_message(chat_id, text):
    try:
        BOT.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"Telegram send error: {e}")

@app.route(f"/{TOKEN}", methods=["POST"])
def receive_update():
    try:
        update = telegram.Update.de_json(request.get_json(force=True), BOT)
        
        if not update.message or not update.message.text:
            logger.warning("Empty message received")
            return "ok", 200
            
        message = update.message.text
        chat_id = update.message.chat.id
        logger.info(f"Received message from {chat_id}: {message[:50]}...")

        if not OPENROUTER_API_KEY:
            logger.error("OpenRouter API key not configured")
            sync_send_message(
                chat_id, 
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API-–∫–ª—é—á OpenRouter"
            )
            return "ok", 200

        try:
            logger.info(f"Sending request to {DEEPSEEK_MODEL}: {message[:50]}...")
            
            response = client.chat.completions.create(
                model=DEEPSEEK_MODEL,
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ñ–æ—Ä–∏–∫. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ."},
                    {"role": "user", "content": message}
                ],
                max_tokens=1000,
                temperature=0.7
            )
            
            reply = response.choices[0].message.content
            logger.info(f"Received response: {reply[:50]}...")
            
            sync_send_message(chat_id, reply)
            
        except Exception as api_error:
            error_msg = f"API error: {str(api_error)}"
            logger.error(error_msg)
            
            if "402" in str(api_error):
                msg = "‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ: [OpenRouter Credits](https://openrouter.ai/settings/credits)"
            elif "model" in str(api_error).lower():
                msg = "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ–ª—å—é\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: " + DEEPSEEK_MODEL
            else:
                msg = "‚ùå –û—à–∏–±–∫–∞ API\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            
            sync_send_message(chat_id, msg)
            
    except Exception as e:
        error_msg = f"System error: {str(e)}"
        logger.error(error_msg)
        sync_send_message(
            chat_id,
            "‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞\n–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"
        )
    
    return "ok", 200

@app.route("/")
def index():
    return "ü§ñ –ë–æ—Ç –ñ–æ—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ", 200

if __name__ == "__main__":
    app.run(
        host="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        debug=False
    )
