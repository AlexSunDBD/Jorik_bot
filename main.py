from flask import Flask, request
import os
import telegram
import asyncio
from openai import OpenAI
import logging
import nest_asyncio

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Flask
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
BOT = telegram.Bot(token=TOKEN)

# –ö–ª–∏–µ–Ω—Ç OpenRouter
client = OpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1"
)

app = Flask(__name__)

async def send_async_message(chat_id, text):
    try:
        await BOT.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"Telegram send error: {e}")

@app.route(f"/{TOKEN}", methods=["POST"])
def receive_update():
    try:
        update = telegram.Update.de_json(request.get_json(force=True), BOT)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
        if not update.message or not update.message.text:
            logger.warning("Empty message received")
            return "ok", 200
            
        message = update.message.text
        chat_id = update.message.chat.id
        logger.info(f"Received message from {chat_id}: {message[:50]}...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
        if not OPENROUTER_API_KEY:
            logger.error("OpenRouter API key not configured")
            asyncio.run(send_async_message(
                chat_id, 
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API-–∫–ª—é—á OpenRouter"
            ))
            return "ok", 200

        # –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
        try:
            logger.info(f"Sending request to DeepSeek V3: {message[:50]}...")
            
            response = client.chat.completions.create(
                model="deepseek-ai/deepseek-v3",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ñ–æ—Ä–∏–∫. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ."},
                    {"role": "user", "content": message}
                ],
                max_tokens=1500,
                temperature=0.7,
                top_p=0.9
            )
            
            reply = response.choices[0].message.content
            logger.info(f"Received response: {reply[:50]}...")
            
            asyncio.run(send_async_message(chat_id, reply))
            
        except Exception as api_error:
            error_msg = f"API error: {str(api_error)}"
            logger.error(error_msg)
            
            if "402" in str(api_error):
                msg = "‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ OpenRouter\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å: [OpenRouter Credits](https://openrouter.ai/settings/credits)"
            elif "400" in str(api_error) and "not a valid model ID" in str(api_error):
                msg = "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
            else:
                msg = "‚ùå –û—à–∏–±–∫–∞ API\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
            
            asyncio.run(send_async_message(chat_id, msg))
            
    except Exception as e:
        error_msg = f"System error: {str(e)}"
        logger.error(error_msg)
        asyncio.run(send_async_message(
            chat_id,
            "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω"
        ))
    
    return "ok", 200

@app.route("/")
def index():
    return "ü§ñ –ë–æ—Ç –ñ–æ—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ", 200

@app.route("/health")
def health_check():
    return "OK", 200

if __name__ == "__main__":
    app.run(
        host="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        debug=os.environ.get("DEBUG", "false").lower() == "true"
    )