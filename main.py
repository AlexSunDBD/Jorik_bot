from flask import Flask, request
import os
import telegram
import requests
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
bot = telegram.Bot(token=TOKEN)

# 100% —Ä–∞–±–æ—á–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ)
MODEL = "meta-llama/codellama-34b-instruct"

app = Flask(__name__)

def send_message(chat_id, text):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"Telegram send error: {e}")

@app.route(f"/{TOKEN}", methods=["POST"])
def receive_update():
    try:
        data = request.get_json()
        if not data or 'message' not in data:
            return "ok", 200

        message = data['message'].get('text', '')
        chat_id = data['message']['chat']['id']
        logger.info(f"New message from {chat_id}: {message[:50]}...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.strip():
            send_message(chat_id, "ü§ñ –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å...")
            return "ok", 200

        try:
            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "HTTP-Referer": "https://jorik-bot.onrender.com",
                    "X-Title": "JorikBot"
                },
                json={
                    "model": MODEL,
                    "messages": [
                        {"role": "system", "content": "–¢—ã –ñ–æ—Ä–∏–∫ - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."},
                        {"role": "user", "content": message}
                    ],
                    "max_tokens": 300,
                    "temperature": 0.7
                },
                timeout=15
            )

            if response.status_code == 200:
                reply = response.json()["choices"][0]["message"]["content"]
                send_message(chat_id, reply)
            else:
                error_msg = response.json().get("error", {}).get("message", "Unknown error")
                logger.error(f"API error {response.status_code}: {error_msg}")
                send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        except Exception as api_error:
            logger.error(f"API request failed: {str(api_error)}")
            send_message(chat_id, "üî¥ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏")

    except Exception as e:
        logger.error(f"System error: {str(e)}")

    return "ok", 200

@app.route("/")
def home():
    return "ü§ñ –ë–æ—Ç –ñ–æ—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)